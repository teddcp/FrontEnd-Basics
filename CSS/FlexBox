Tutorials
---------------------------

1.  https://css-tricks.com/snippets/css/a-guide-to-flexbox/
2.  https://bocoup.com/blog/dive-into-flexbox

Visual guide
------------------
https://flexboxfroggy.com/
https://cssreference.io/flexbox/

https://medium.com/@js_tut/the-complete-css-flex-box-tutorial-d17971950bdc


Youtube videos
---------------------
!. Academind - Flexxbox tutorial (part 1 & 2)
2. Net ninja flex box tutorial
3. freecodecamp flex box tutorial (Detailed analysis)

Example
--------
https://codepen.io/team/css-tricks/pen/YqaKYR


Cheatsheets
----------------
1. https://yoksel.github.io/flex-cheatsheet/  (best...)
2. https://darekkay.com/dev/flexbox-cheatsheet.html
3. https://jonibologna.com/content/flexboxsheet.pdf

Extras:
------------
1. https://medium.com/hackernoon/11-things-i-learned-reading-the-flexbox-spec-5f0c799c776b
2.https://www.w3schools.com/css/css3_flexbox.asp


My notes
------------------

For container
-------------------
display: flex || inline-flex
flex-flow :  flex-direction flex-wrap
justify-content
align-content
Align-item

FOR ITEMS(CHILDRENS)
------------------------
order
flex: flex-grow flex-shrink flex-basis
align-self

Align-content vs align-items
-----------------------------
1. Align-content
Now that elements can wrap to the next line, we might have multiple rows of flex items within the same container. In a previous exercise, we used the align-items property to space flex items from the top to the bottom of a flex container. align-items is for aligning elements within a single row. If a flex container has multiple rows of content, we can use align-content to space the rows from top to bottom.
align-content property is declared on flex containers.

align-content accepts six values:

flex-start — all rows of elements will be positioned at the top of the parent container with no extra space between.
flex-end — all rows of elements will be positioned at the bottom of the parent container with no extra space between.
center — all rows of elements will be positioned at the center of the parent element with no extra space between.
space-between — all rows of elements will be spaced evenly from the top to the bottom of the container with no space above the first or below the last.
space-around — all rows of elements will be spaced evenly from the top to the bottom of the container with the same amount of space at the top and bottom and between each element.
stretch — if a minimum height or no height is specified, the rows of elements will stretch to fill the parent container from top to bottom (default value).


2.Align-item (along the cross-axis)
you learned how to justify the content of a flex container from left to right across the page. It is also possible to align flex items vertically within the container. The align-items property makes it possible to space flex items vertically.

flex-start — all elements will be positioned at the top of the parent container.
flex-end — all elements will be positioned at the bottom of the parent container.
center — the center of all elements will be positioned halfway between the top and bottom of the parent container.
baseline — the bottom of the content of all items will be aligned with each other.
stretch — if possible, the items will stretch from top to bottom of the container (this is the default value; elements with a specified height will not stretch; elements with a minimum height or no height specified will stretch).
These five values tell the elements how to behave along the cross axis of the parent container. In these examples, the cross axis stretches from top to bottom of the container. We’ll learn more about this in a future exercise.

3.Justify-contnent  (Along the main axis)
when we changed the display value of parent containers to flex or inline-flex, all of the child elements (flex items) moved toward the upper left corner of the parent container. This is the default behavior of flex containers and their children. We can specify how flex items spread out from left to right, along the main axis. We will learn more about axes in a later exercise.

To position the items from left to right, we use a property called justify-content.
There are five values for the justify-content property:

flex-start — all items will be positioned in order starting, from the left of the parent container, with no extra space between or before them.
flex-end — all items will be positioned in order, with the last item starting on the right side of the parent container, with no extra space between or after them.
center — all items will be positioned in order, in the center of the parent container with no extra space before, between, or after them.
space-around — items will be positioned with equal space before and after each item, resulting in double the space between elements.
space-between — items will be positioned with equal space between them, but no extra space before the first or after the last elements.

